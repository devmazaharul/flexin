import { allProduct } from '@/server/controllers/product';
import { GoogleGenAI } from '@google/genai';


export async function POST(req: Request) {
  try {

  const products = await allProduct();
    const { prompt } = await req.json();

    if (!prompt) {
      return new Response(JSON.stringify({ error: 'Prompt is required' }), { status: 400 });
    }

    const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });
    const model = 'gemini-flash-latest';


const userPrompt = `
рждрзБржорж┐ ржПржХржЬржи ржмржирзНржзрзБрж╕рзБрж▓ржн ржПржмржВ рж╕рж╣рж╛ржпрж╝ржХ AI ржкрзНрж░рзЛржбрж╛ржХрзНржЯ рж░рж┐ржХржорзЗржирзНржбрж╛рж░ред  
рждрзЛржорж╛рж░ ржПржХржорж╛рждрзНрж░ ржХрж╛ржЬ рж╣рж▓рзЛ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ рж╕ржорж╕рзНржпрж╛рж░ рж╕рж╛ржерзЗ рж╕ржорзНржкрж░рзНржХрж┐ржд ржкрзНрж░рзЛржбрж╛ржХрзНржЯ рж╕рж╛ржЬрзЗрж╕рзНржЯ ржХрж░рж╛ред  

ЁЯзй ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ рж╕ржорж╕рзНржпрж╛:
"${prompt}"

ЁЯЫНя╕П ржирж┐ржЪрзЗрж░ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ рждрж╛рж▓рж┐ржХрж╛ ржерзЗржХрзЗ рж╢рзБржзрзБржорж╛рждрзНрж░ ржкрзНрж░рж╛рж╕ржЩрзНржЧрж┐ржХ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзЛ:
${JSON.stringify(products, null, 2)}

ЁЯУЛ ржирж┐рж░рзНржжрзЗрж╢рж╛ржмрж▓рзА:
1я╕ПтГг ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ рж╕ржорж╕рзНржпрж╛рж░ ржЙржкрж░ рж╕рж░рзНржмрзЛржЪрзНржЪ 2-3 рж▓рж╛ржЗржирзЗ рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржЖрж▓рзЛржЪржирж╛ ржжрж╛ржУред  
2я╕ПтГг рж╢рзБржзрзБржорж╛рждрзНрж░ ржкрзНрж░рж╛рж╕ржЩрзНржЧрж┐ржХ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ рж╕рж╛ржЬрзЗрж╕рзНржЯ ржХрж░рзЛ тАФ ржкрзНрж░рждрж┐ржЯрж┐ ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░ ржирж╛ржо ржУ рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржмрж░рзНржгржирж╛ ржжрж╛ржУред  
3я╕ПтГг  рж╕рзНржЯржХ, рж▓рж┐ржВржХ ржмрж╛ ржЗржорзЗржЬ рж╕ржорзНржкрж░рзНржХрзЗ ржХрж┐ржЫрзБржЗ ржЙрж▓рзНрж▓рзЗржЦ ржХрж░ржмрзЗ ржирж╛ред  
4я╕ПтГг ржпржжрж┐ ржЙржкржпрзБржХрзНржд ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржирж╛ ржкрж╛ржУ, ржирждрзБржи ржХрж┐ржЫрзБ ржмрж╛ржирж╛ржмрзЗ ржирж╛ тАФ ржмрж░ржВ ржмрж▓ржмрзЗ:
   "рждрзЛржорж╛рж░ рж╕ржорж╕рзНржпрж╛рж░ рж╕рж╛ржерзЗ рж╕рж░рж╛рж╕рж░рж┐ ржорзЗрж▓рзЗ ржПржоржи ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржкрж╛ржЗржирж┐, рждржмрзЗ ржирж┐ржЪрзЗрж░ ржкрзНрж░рзЛржбрж╛ржХрзНржЯржЧрзБрж▓рзЛ ржжрзЗржЦрждрзЗ ржкрж╛рж░рзЛред"
5я╕ПтГг ржЙрждрзНрждрж░ржЯрж┐ рж╕рж░рзНржмржжрж╛ ржмрж╛ржВрж▓рж╛ржпрж╝, ржмржирзНржзрзБрж╕рзБрж▓ржн ржУ рж╕рзБржирзНржжрж░ ржлрж░ржорзНржпрж╛ржЯрзЗ ржжрж╛ржУ (emoji ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗ)ред  

ржЙрждрзНрждрж░ржЯрж┐ ржирж┐ржЪрзЗрж░ ржлрж░ржорзНржпрж╛ржЯрзЗ ржжрж╛ржУ:
-------------------------------------
ЁЯТм рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржЖрж▓рзЛржЪржирж╛:  
<рзитАУрзй рж▓рж╛ржЗржирзЗрж░ ржмрзНржпрж╛ржЦрзНржпрж╛>

тЬи ржкрзНрж░рж╕рзНрждрж╛ржмрж┐ржд ржкрзНрж░рзЛржбрж╛ржХрзНржЯрж╕ржорзВрж╣:
- ЁЯж╖ **ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржирж╛ржо** тАФ рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржмрж┐ржмрж░ржг
- ЁЯМ┐ **ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржирж╛ржо** тАФ рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржмрж┐ржмрж░ржг
-------------------------------------
`;



    const stream = await ai.models.generateContentStream({
      model,
      contents: [{ role: 'user', parts: [{ text: userPrompt }] }],
    });

    const encoder = new TextEncoder();

    return new Response(
      new ReadableStream({
        async start(controller) {
          try {
            for await (const chunk of stream) {
              if (chunk.text?.trim()) {
                controller.enqueue(encoder.encode(chunk.text));
              }
            }
            controller.close();
          } catch (err: unknown) {
           if(err instanceof Error){
             controller.enqueue(encoder.encode(`[ERROR] ${err.message}`));
            controller.close();
           }else {
            const error=err as {message:string}
             controller.enqueue(encoder.encode(`[ERROR] ${error.message}`));
            controller.close();
           }
          }
        },
      }),
      {
        headers: {
          'Content-Type': 'text/plain; charset=utf-8',
          'Cache-Control': 'no-cache',
          Connection: 'keep-alive',
        },
      }
    );
  } catch (error: unknown) {
    const err=error as {message:string}
    return new Response(JSON.stringify({ error: err.message }), { status: 500 });
  }
}
